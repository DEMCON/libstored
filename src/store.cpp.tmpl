{#
vim:filetype=cpp

/*
 * libstored, distributed debuggable data stores.
 * Copyright (C) 2020-2021  Jochem Rutgers
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
-#}

#include "{{store.name}}.h"

#include <cstring>

namespace stored {

{% if store.buffer.init|len > 0 %}
/*!
 * \brief Non-zero initialized variables in the store.
 * \details This block of memory is copied to the start of the buffer upon initialization.
 */
// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays)
static unsigned char const {{store.name}}Data_bufferinit[{{store.buffer.init|len}}] = {
	{{store.buffer.init|carray|tab_indent(1)}}
};

{% endif %}
/*!
 * \brief Constructor.
 */
{{store.name}}Data::{{store.name}}Data()
    : buffer()
{
{% if store.buffer.init|len > 0 %}
    memcpy(buffer, {{store.name}}Data_bufferinit, sizeof({{store.name}}Data_bufferinit));
{% endif %}
{% if store.littleEndian %}
	static_assert(Config::StoreInLittleEndian, "");
{% else %}
	static_assert(!Config::StoreInLittleEndian, "");
{% endif %}
}

// For C++14, put the short directory in the header file to be able to access
// it for constexpr find().  However, for older C++ versions, that is not
// possible. In that case, put it here to save some compilation time.

/*!
 * \brief Directory listing with short (but unambiguous) names in binary directory format.
 * \details This is typically used for searching the directory.
 * \see include/libstored/directory.h for the format
 */
#if STORED_cplusplus >= 201402L
#  if STORED_cplusplus < 201703L
// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays)
constexpr uint8_t {{store.name}}Data::directory[];
#  endif
#else
// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays)
static uint8_t const {{store.name}}Data_directory[{{store.directory.data|len}}] = {
	{{store.directory.data|carray|tab_indent(1)}}
};

/*!
 * \brief Returns the short directory.
 */
uint8_t const* {{store.name}}Data::shortDirectory() noexcept {
    return (uint8_t const*){{store.name}}Data_directory;
}
#endif

/*!
 * \brief Directory listing with full names in binary directory format.
 * \details This is typically used for listing the directory.
 * \see include/libstored/directory.h for the format
 */
// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays)
static uint8_t const {{store.name}}Data_directory_full[{{store.directory.longdata|len}}] = {
	{{store.directory.longdata|carray|tab_indent(1)}}
};

/*!
 * \brief Retuns the long directory.
 * \details When not available, the short directory is returned.
 */
uint8_t const* {{store.name}}Data::longDirectory() noexcept {
    return Config::FullNames ? (uint8_t const*){{store.name}}Data_directory_full : shortDirectory();
}

} // namespace stored

