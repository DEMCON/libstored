// clang-format off
{#
// vim:filetype=cpp
-#}
// SPDX-FileCopyrightText: 2020-2023 Jochem Rutgers
//
// SPDX-License-Identifier: MPL-2.0

#include "{{store.filename}}.h"

#include <cstring>

namespace stored {

{% if store.buffer.init|len > 0 %}
/*!
 * \brief Non-zero initialized variables in the store.
 * \details This block of memory is copied to the start of the buffer upon initialization.
 */
// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays)
// flawfinder: ignore
static unsigned char const {{store.name}}Data_bufferinit[{{store.buffer.init|len}}] = {
	{{store.buffer.init|carray|tab_indent(1)}}
};

{% endif %}
/*!
 * \brief Constructor.
 */
{{store.name}}Data::{{store.name}}Data() noexcept
	: buffer()
{
{% if store.buffer.init|len > 0 %}
	static_assert(sizeof(buffer) >= sizeof({{store.name}}Data_bufferinit), "");
	// flawfinder: ignore
	memcpy(buffer, {{store.name}}Data_bufferinit, sizeof({{store.name}}Data_bufferinit));
{% endif %}
{% if store.littleEndian %}
	static_assert(Config::StoreInLittleEndian, "");
{% else %}
	static_assert(!Config::StoreInLittleEndian, "");
{% endif %}
}

// For C++14, put the short directory in the header file to be able to access
// it for constexpr find().  However, for older C++ versions, that is not
// possible. In that case, put it here to save some compilation time.

/*!
 * \brief Directory listing with short (but unambiguous) names in binary directory format.
 * \details This is typically used for searching the directory.
 * \see include/libstored/directory.h for the format
 */
#if STORED_cplusplus >= 201402L
#	if STORED_cplusplus < 201703L
// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,readability-redundant-declaration)
constexpr uint8_t {{store.name}}Data::directory[];
#	endif
#else // < C++14
// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays)
static uint8_t const {{store.name}}Data_directory[{{store.directory.data|len}}] = {
	{{store.directory.data|carray|tab_indent(1)}}
};

/*!
 * \brief Returns the short directory.
 */
uint8_t const* {{store.name}}Data::shortDirectory() noexcept
{
	return (uint8_t const*){{store.name}}Data_directory;
}
#endif // < C++14

/*!
 * \brief Directory listing with full names in binary directory format.
 * \details This is typically used for listing the directory.
 * \see include/libstored/directory.h for the format
 */
// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays)
static uint8_t const {{store.name}}Data_directory_full[{{store.directory.longdata|len}}] = {
	{{store.directory.longdata|carray|tab_indent(1)}}
};

/*!
 * \brief Retuns the long directory.
 * \details When not available, the short directory is returned.
 */
uint8_t const* {{store.name}}Data::longDirectory() noexcept
{
	return Config::FullNames ? (uint8_t const*){{store.name}}Data_directory_full : shortDirectory();
}

#ifdef STORED_HAVE_QT
Qtified{{store.name}}Base::Qtified{{store.name}}Base(QObject* parent)
	: QObject{parent}
{}

Qtified{{store.name}}Base::~Qtified{{store.name}}Base() = default;

Q{{store.name}}::Q{{store.name}}(QObject* parent)
	: base{parent}
{}

Q{{store.name}}::~Q{{store.name}}() = default;

#	ifndef DOXYGEN
		// NOLINTNEXTLINE(bugprone-suspicious-include)
#		include "moc_{{store.filename}}.cpp"
#	endif // !DOXYGEN
#endif // STORED_HAVE_QT
} // namespace stored
// clang-format on
