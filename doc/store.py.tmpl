{#
vim:filetype=python

libstored, distributed debuggable data stores.
Copyright (C) 2020-2022  Jochem Rutgers

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

#}
from collections import namedtuple

{{store.name}}ObjectMeta = namedtuple('{{store.name}}ObjectMeta', ['name', 'cname', 'type', 'ctype', 'size', 'isfunction', 'f', 'offset', 'init', 'axi'])

class {{store.name}}Meta(object):
    def __init__(self):
        self._objects = [
{% for o in store.objects %}
            {{store.name}}ObjectMeta({{o.name|pystring}}, {{o.cname|pystring}}, {{o.type|pystring}}, '{{o|ctype}}', {{o.size}},
{%-   if o is function %}
 True, {{o.f}}, None, None, None
{%-   else %}
 False, None, {{o.offset}}, {{o.init|pyliteral}}, {{o.axi}}
{%-    endif -%}
)
{%-   if not loop.last %},
{% endif -%}
{% endfor -%}
        ]

    @property
    def name(self):
        return {{store.name|pystring}}

    @property
    def hash(self):
        return {{store.hash|pystring}}

    @property
    def objects(self):
        return self._objects

    @property
    def functions(self):
        return filter(lambda o: o.isfunction, self._objects)

    @property
    def variables(self):
        return filter(lambda o: not o.isfunction, self._objects)

    def __len__(self):
        return len(self._objects)

    def __getitem__(self, key):
        return next(filter(lambda o: o.name == key, self._objects))

    def __getattr__(self, name):
        return next(filter(lambda o: o.cname == name, self._objects))

    def __iter__(self):
        return iter(self._objects)
