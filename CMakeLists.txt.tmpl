{#
# vim:filetype=cmake
#
# libstored, distributed debuggable data stores.
# Copyright (C) 2020-2021  Jochem Rutgers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#}

cmake_minimum_required(VERSION 3.0)
include(CheckIncludeFileCXX)

file(TO_CMAKE_PATH "{{libstored_dir|escapebs}}" libstored_dir)

add_library({{libprefix}}libstored
	${libstored_dir}/include/stored
	${libstored_dir}/include/stored.h
	${libstored_dir}/include/stored_config.h
	${libstored_dir}/include/libstored/compress.h
	${libstored_dir}/include/libstored/config.h
	${libstored_dir}/include/libstored/debugger.h
	${libstored_dir}/include/libstored/directory.h
	${libstored_dir}/include/libstored/macros.h
	${libstored_dir}/include/libstored/poller.h
	${libstored_dir}/include/libstored/spm.h
	${libstored_dir}/include/libstored/synchronizer.h
	${libstored_dir}/include/libstored/types.h
	${libstored_dir}/include/libstored/util.h
	${libstored_dir}/include/libstored/version.h
	${libstored_dir}/include/libstored/zmq.h
	${libstored_dir}/src/compress.cpp
	${libstored_dir}/src/directory.cpp
	${libstored_dir}/src/debugger.cpp
	${libstored_dir}/src/poller.cpp
	${libstored_dir}/src/protocol.cpp
	${libstored_dir}/src/synchronizer.cpp
	${libstored_dir}/src/util.cpp
	${libstored_dir}/src/zmq.cpp
{% for m in models %}
	${CMAKE_CURRENT_SOURCE_DIR}/{{m|header}}
	${CMAKE_CURRENT_SOURCE_DIR}/{{m|src}}
{% endfor %}
)

target_include_directories({{libprefix}}libstored
	PUBLIC ${libstored_dir}/include
	PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include
)

set_target_properties({{libprefix}}libstored PROPERTIES OUTPUT_NAME "stored")

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
	target_compile_definitions({{libprefix}}libstored PUBLIC -D_DEBUG)
else()
	target_compile_definitions({{libprefix}}libstored PUBLIC -DNDEBUG)
endif()

if(MSVC)
	target_compile_options({{libprefix}}libstored PRIVATE /Wall /WX)
else()
	target_compile_options({{libprefix}}libstored PRIVATE -Wall -Wextra -Werror -Wdouble-promotion -Wformat=2 -Wundef -Wconversion -ffunction-sections -fdata-sections)
endif()

CHECK_INCLUDE_FILE_CXX("valgrind/memcheck.h" LIBSTORED_HAVE_VALGRIND)
if(LIBSTORED_HAVE_VALGRIND)
	target_compile_definitions({{libprefix}}libstored PUBLIC -DSTORED_HAVE_VALGRIND)
endif()

if(TARGET libzth)
	message(STATUS "Enable Zth integration for {{libprefix}}libstored")
	target_compile_definitions({{libprefix}}libstored PUBLIC -DSTORED_HAVE_ZTH)
	target_link_libraries({{libprefix}}libstored PUBLIC libzth)
endif()

if(LIBSTORED_HAVE_LIBZMQ)
	target_compile_definitions({{libprefix}}libstored PUBLIC -DSTORED_HAVE_ZMQ)
	target_include_directories({{libprefix}}libstored
		PRIVATE $<TARGET_PROPERTY:libzmq,INTERFACE_INCLUDE_DIRECTORIES>
	)
	target_link_libraries({{libprefix}}libstored INTERFACE libzmq)
endif()

if(WIN32)
	target_link_libraries({{libprefix}}libstored INTERFACE ws2_32)
endif()

if(LIBSTORED_HAVE_HEATSHRINK)
	target_link_libraries({{libprefix}}libstored PUBLIC heatshrink)
endif()

if(${CMAKE_VERSION} VERSION_GREATER "3.6.0")
	find_program(CLANG_TIDY_EXE NAMES "clang-tidy" DOC "Path to clang-tidy executable")
	if(CLANG_TIDY_EXE AND (NOT CMAKE_CXX_STANDARD OR NOT CMAKE_CXX_STANDARD EQUAL 98))
		option(LIBSTORED_CLANG_TIDY "Run clang-tidy" ON)
		if(LIBSTORED_CLANG_TIDY)
			string(CONCAT CLANG_TIDY_CHECKS "-checks="
				"bugprone-*,"
				"clang-analyzer-*,"
				"concurrency-*,"

				"cppcoreguidelines-*,"
				"-cppcoreguidelines-avoid-c-arrays,"
				"-cppcoreguidelines-avoid-goto,"
				"-cppcoreguidelines-avoid-magic-numbers,"
				"-cppcoreguidelines-explicit-virtual-functions,"
				"-cppcoreguidelines-macro-usage,"
				"-cppcoreguidelines-pro-bounds-array-to-pointer-decay,"
				"-cppcoreguidelines-pro-bounds-pointer-arithmetic,"
				"-cppcoreguidelines-pro-type-union-access,"
				"-cppcoreguidelines-pro-type-vararg,"

				"hicpp-*,"
				"-hicpp-avoid-c-arrays,"
				"-hicpp-avoid-goto,"
				"-hicpp-braces-around-statements,"
				"-hicpp-member-init,"
				"-hicpp-no-array-decay,"
				"-hicpp-no-malloc,"
				"-hicpp-uppercase-literal-suffix,"
				"-hicpp-use-auto,"
				"-hicpp-use-override,"
				"-hicpp-vararg,"

				"misc-*,"
				"-misc-no-recursion,"
				"-misc-non-private-member-variables-in-classes,"

				"readability-*,"
				"-readability-braces-around-statements,"
				"-readability-convert-member-functions-to-static,"
				"-readability-else-after-return,"
				"-readability-implicit-bool-conversion,"
				"-readability-magic-numbers,"
				"-readability-make-member-function-const,"
				"-readability-uppercase-literal-suffix,"
				"-readability-redundant-access-specifiers,"

				"performance-*,"
				"portability-*,"
			)
			set(DO_CLANG_TIDY "${CLANG_TIDY_EXE}" "${CLANG_TIDY_CHECKS}"
				"--extra-arg=-I${libstored_dir}/include"
				"--extra-arg=-I${libstored_dir}/extern/libzmq/include"
				"--extra-arg=-I${libstored_dir}/extern/heatshrink"
				"--extra-arg=-I${CMAKE_CURRENT_SOURCE_DIR}/include"
				"--header-filter=.*include/libstored.*"
				"--warnings-as-errors=*"
				"--extra-arg=-Wno-unknown-warning-option"
			)

			set_target_properties({{libprefix}}libstored
				PROPERTIES CXX_CLANG_TIDY "${DO_CLANG_TIDY}" )
		else()
			set_target_properties({{libprefix}}libstored
				PROPERTIES CXX_CLANG_TIDY "")
		endif()
	endif()
endif()

if(LIBSTORED_ENABLE_ASAN)
	target_compile_options({{libprefix}}libstored PRIVATE -fsanitize=address -fno-omit-frame-pointer)
	target_compile_definitions({{libprefix}}libstored PRIVATE -DSTORED_ENABLE_ASAN)
	if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.13.0")
		target_link_options({{libprefix}}libstored INTERFACE -fsanitize=address)
	else()
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address")
		set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address")
	endif()
endif()

if(LIBSTORED_ENABLE_LSAN)
	target_compile_options({{libprefix}}libstored PRIVATE -fsanitize=leak -fno-omit-frame-pointer)
	target_compile_definitions({{libprefix}}libstored PRIVATE -DSTORED_ENABLE_LSAN)
	if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.13.0")
		target_link_options({{libprefix}}libstored INTERFACE -fsanitize=leak)
	else()
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=leak")
		set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=leak")
	endif()
endif()

if(LIBSTORED_ENABLE_UBSAN)
	target_compile_options({{libprefix}}libstored PRIVATE -fsanitize=undefined -fno-omit-frame-pointer)
	target_compile_definitions({{libprefix}}libstored PRIVATE -DSTORED_ENABLE_UBSAN)
	if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.13.0")
		target_link_options({{libprefix}}libstored INTERFACE -fsanitize=undefined)
	else()
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=undefined")
		set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=undefined")
	endif()
endif()

