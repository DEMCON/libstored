# vim:filetype=cmake
cmake_minimum_required(VERSION 3.0)
include(CheckIncludeFileCXX)

file(TO_CMAKE_PATH "{{libstored_dir|escapebs}}" libstored_dir)

add_library({{libprefix}}libstored
    ${libstored_dir}/include/stored
    ${libstored_dir}/include/stored.h
    ${libstored_dir}/include/libstored/macros.h
    ${libstored_dir}/include/libstored/types.h
    ${libstored_dir}/include/libstored/directory.h
    ${libstored_dir}/include/libstored/util.h
    ${libstored_dir}/src/directory.cpp
    ${libstored_dir}/src/debugger.cpp
    ${libstored_dir}/src/protocol.cpp
{% for m in models %}
    ${CMAKE_CURRENT_SOURCE_DIR}/{{m|header}}
    ${CMAKE_CURRENT_SOURCE_DIR}/{{m|src}}
{% endfor %}
)

target_include_directories({{libprefix}}libstored
    PUBLIC ${libstored_dir}/include
    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include
)

set_target_properties({{libprefix}}libstored PROPERTIES OUTPUT_NAME "stored")

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
	target_compile_definitions({{libprefix}}libstored PUBLIC -D_DEBUG)
else()
	target_compile_definitions({{libprefix}}libstored PUBLIC -DNDEBUG)
endif()

if(MSVC)
	target_compile_options({{libprefix}}libstored PRIVATE /Wall /WX)
else()
	target_compile_options({{libprefix}}libstored PRIVATE -Wall -Wextra -Werror -Wdouble-promotion -Wformat=2 -Wundef -Wconversion -ffunction-sections -fdata-sections)
endif()

CHECK_INCLUDE_FILE_CXX("valgrind/memcheck.h" STORED_HAVE_VALGRIND)
if(STORED_HAVE_VALGRIND)
	target_compile_definitions({{libprefix}}libstored PUBLIC -DSTORED_HAVE_VALGRIND)
endif()

if(${CMAKE_VERSION} VERSION_GREATER "3.6.0")
    find_program(CLANG_TIDY_EXE NAMES "clang-tidy" DOC "Path to clang-tidy executable")
    if(CLANG_TIDY_EXE)
        option(LIBSTORED_CLANG_TIDY "Run clang-tidy" ON)
        if(LIBSTORED_CLANG_TIDY)
            string(CONCAT CLANG_TIDY_CHECKS "-checks="
                "cppcoreguidelines-*,"
                "-cppcoreguidelines-pro-bounds-array-to-pointer-decay,"
                "-cppcoreguidelines-pro-type-union-access,"
                "-cppcoreguidelines-pro-bounds-pointer-arithmetic,"

                "hicpp-*,"
                "-hicpp-braces-around-statements,"
                "-hicpp-no-array-decay,"
                "-hicpp-member-init,"
                "-hicpp-use-auto,"
                "-hicpp-no-malloc,"
                "-hicpp-use-override,"

                "performance-*,"
                "clang-analyzer-*,"
                "bugprone-*,"
                "portability-*,"

                "readability-*,"
                "-readability-braces-around-statements,"
                "-readability-implicit-bool-conversion,"
                "-readability-else-after-return,"
            )
            set(DO_CLANG_TIDY "${CLANG_TIDY_EXE}" "${CLANG_TIDY_CHECKS}"
                "-header-filter=.*libstored.*")
        endif()

        set_target_properties({{libprefix}}libstored
            PROPERTIES CXX_CLANG_TIDY "${DO_CLANG_TIDY}" )
    endif()
endif()

